#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// John
// pM est le nombre de colone , pN est le nombre de ligne ,pSym le nombre de
// symbole diferent la procedure demande utilisateur demande le nombre de colone
// et de ligne que le plateau de jeu aura ainsi que le nombre de symbole compris
// entre 4 et 6

void vide_buffer(){
while(getchar()!='\n'){}
}

void demande_utilisateur(int *pM, int *pN, int *pSym) {
  int verif;
 do{ printf(" rentrer le nombre de ligne :\n ");
  verif=scanf("%d",&*pM);
  vide_buffer();
  }while(verif!=1);
  do{ printf("rentrer le nombre de colonne :\n ");
  verif=scanf("%d", &*pN);
  vide_buffer();
  }while(verif!=1);
  do{while (*pSym >= 7 || *pSym <= 3) {
    printf(" rentrer le nombre de symbole :\n");
    scanf("%d", *&pSym);
    vide_buffer();
  }
  }while(verif!=1);
}

// crer le plateau de jeu de colone M et de ligne N avec nbr_Sym le nombre de
// symbolle different
void crer_plat(int M, int N, int nbr_Sym, int pla[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      pla[i][j] = rand() % nbr_Sym + 1;
    }
  }
}

// complexité ?
// revoir les espace
// fonction qui permet d'afficher les colonnes et les lignes du tableau
void afiche(int M, int N, int pla[][N]) {
  printf("\033[H\033[J"); // PERMET DE FAIRE UN SEUL TABLEAU 

  printf("  ");
  for (int i = 1; i <= N; i++) {
    if(i<10){
    printf(" %d ", i);
    }
    else{
    printf(" %d", i);
    }
  }
  printf(" ");
 
  printf("\n   ");
  for (int i = 1; i <= N; i++) {
    printf("-- ");
  }
  printf("\n");
  for (int i = 0; i < M; i++) {
    printf("%c |", 65 + i);
    for (int j = 0; j < N; j++) {
      switch(pla[i][j]){
       
        case 6:
          printf("\U0001F36D ");
          break;
        case 1:
          printf("\U0001F36B ");
          break;
        case 2:
          printf("\U0001F36C ");
          break;
        case 3:
          printf("\U0001F36E ");
          break;
        case 4:
          printf("\U0001F36F ");
          break;
        case 5:
          printf("\U0001F9C1 ");
          break;
        default:
          printf("  ");
        }
    }
    printf("\n");
  }
}
// verifier que qd y'a trois symboles ou plus a cote on les supprimes
void Vertical(int M, int N, int pla[][N], int Vertical[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j] != 0) {
        if (i < M - 1) {
          int y = i + 1;
          int compte = 0;
          while (y != M && (pla[i][j] == pla[y][j])) {
            compte++;
            y++;
          }
          if (compte >= 2) {
            for (int k = i; k < y; k++) {
              Vertical[k][j] = 0;
            }
          }
        }
      }
    }
  }
}
// verifier que qd y'a trois symboles ou plus a cote on les supprimes
void Horizontal(int M, int N, int pla[][N], int Horizontal[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j] != 0) {
        if (j < N - 1) {
          int y = j + 1;
          int compte = 0;
          while (y != N && (pla[i][j] == pla[i][y])) {
            compte++;
            y++;
          }
          if (compte >= 2) {
            for (int k = j; k < y; k++) {
              Horizontal[i][k] = 0;
            }
          }    
        }
      }
    }
  }
}
void Circulaire_G(int M, int N, int pla[][N], int C[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
       int compte = 0 ;
if (pla[i][0] == pla[i][1]) {
             compte++;
            }
     if (j==0 && compte >=1 && pla[i][N-1]==pla[i][0]){
      C[i][0]= 0;
      C[i][1] = 0;
      C[i][N-1]= 0;
     }
   
    }
  }
 }
 
 void Circulaire_D(int M, int N, int pla[][N], int C[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      int compte = 0 ;
      if (pla[i][N-2] == pla[i][N-1]) {
        compte++;
            }
     if (j==M-2 && compte >=1 && pla[i][N-1]==pla[i][0]){
      C[i][0]= 0;
      C[i][N-2] = 0;
      C[i][N-1]= 0;
     }
    }
  }
 }
// permet de regrouper les deux tableau horizantal et vertical a voir probleme
void simplification(int M, int N, int Horizontale[][N], int Vertical[][N],int C_G[][N],int C_D[][N],int pla[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (Horizontale[i][j] == 0 || Vertical[i][j] == 0 || C_G[i][j] == 0 || C_D[i][j] == 0) {
        pla[i][j] = 0;
      }
    }
  }
}
void initialisation(int N,int M, int pla[][N],int horizontale[][N]){
 
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      horizontale[i][j] = pla[i][j];
    }
  }
}
void gravite(int M, int N, int pla[][N]){
  for (int i = M-1;i>=0;i--){
      for (int j = N-1; j >= 0; j--) {
       if (pla[i][j]==0){
        int k = j;
        while (k>=0 && pla[i][k]==0){
          k--;
        }
         if(k>=0){
           pla[i][j]= pla[i][k];
           pla[i][k]=0;
         }
       }
      }
    }
}

void ajout(int M, int N, int nbr_Sym, int pla[][N]){
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j]==0){
        pla[i][j] = rand() % nbr_Sym + 1;
      }
    }
  }
}

 int compte_zero(int M, int N, int pla[][N]){
   int zero = 0;
   for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j]==0){
        zero++;
      }
      else{
        break;
      }
    }
   }
   return zero;  
 }

void verification(int M, int N,int nbr_Sym, int pla[][N]){
    int horizontal[M][N];
    int vertical[M][N];
    int C_G[M][N];
    int C_D[M][N];
    ajout(M, N, nbr_Sym,pla );
    initialisation(N,M, pla, horizontal);
  initialisation(N,M, pla, vertical);
  initialisation(N,M, pla, C_G);
  initialisation(N,M, pla, C_D);
    Horizontal(M, N, pla, horizontal);
    Vertical(M, N, pla, vertical);
    Circulaire_G(M,N,pla,C_G);
    Circulaire_D(M,N,pla,C_D);
    simplification(M, N, horizontal, vertical,C_G,C_D ,pla);
    gravite(M,N,pla);

}

void reaction_en_chaine(int M, int N,int nbr_Sym, int pla[][N]){
int zero1= -1;
  while (zero1 !=0){
    verification(M, N, nbr_Sym , pla);
    printf("\n");
    zero1 = compte_zero(M, N, pla);
  }
}
void purge(void)
{
        int c = 0;
 
        while((c = getchar()) != '\n' && c != EOF);
}

int echange(int N,int M,int nbr_sym,int colone1, int colone2,int ligne1,int ligne2,int verif, int pla[][N]){
  int pla_temp[M][N];
  initialisation(N,M, pla, pla_temp);
  int temp = pla_temp[ligne2][colone2-1];
  pla_temp[ligne2][colone2-1] = pla_temp[ligne1][colone1-1];
  pla_temp[ligne1][colone1-1] = temp;
  verification(M, N, nbr_sym, pla_temp);
  if(compte_zero(M,N, pla_temp)!=0){
      if(verif == 0){
        return 1;
      }
    else{
      initialisation(N,M, pla_temp, pla);
      reaction_en_chaine(M, N,nbr_sym, pla);
    }
  }
  else{
    return 0;
  }
}

int victoire(int N,int M,int nbr_sym, int pla[][N]){
  for (int i =0;i<M;i++){
   for (int j =0;j<N;j++){
     int k = 0;
     while(k<M){
       for (int l =0;l<N;l++){
         if(echange(N,M,nbr_sym,j+1,l+1,i,k,0,pla)==1){
           return  1;
         }
       }
      k++;
     }
    }
  }
  return 0;
}

void demande_case (int N,int M,int nbr_sym, int pla[][N]){
  char lettre1;
  int colone1;
  int ligne1;
  char lettre2;
  int colone2;
  int ligne2;
  int verif;
  printf("veillez rensegnez les deux case à echanger\n");
  //purge();
  do{
  printf("ligne case 1 : \n");
  verif=scanf("%c",&lettre1);
  vide_buffer();
  //printf("veillez renseigner une ligne cohérente :\n");
  }while(verif!=1);
  /*lettre1<65 || lettre1>65+M && lettre1<97 ||  lettre1>97+M || *///purge();
  printf("colone case 1 : ");
  scanf("%d",&colone1);
  ligne1 = lettre1-65;

  printf("ligne case 2 : ");
  purge();
  scanf("%c",&lettre2);
  purge();
  printf("colone case 2 : ");
  scanf("%d",&colone2);
  ligne2 = lettre2-65;  
  echange(N,M,nbr_sym, colone1, colone2,ligne1,ligne2,1,pla);
}

int main(void) {
  int M = 0;
  int N = 0;
  int nbr_sym = 0;
  int *pM = &M;
  int *pN = &N;
  int *pSym = &nbr_sym;
  time_t deb;
  time_t fin;
  deb = time(NULL);
  demande_utilisateur(pM, pN, pSym);
  srand(time(NULL));
  int pla[M][N];
  int horizontal[M][N];
  int vertical[M][N];
  crer_plat(M, N, nbr_sym, pla);
  reaction_en_chaine(M, N, nbr_sym, pla);
  afiche(M, N, pla);
  while(victoire(N,M,nbr_sym,pla)==1){
      demande_case(N,M,nbr_sym,pla);
      afiche(M, N, pla);
    }
  printf("\nvous avez perdu ");
  fin = time(NULL);
  printf("%ld",fin -deb);
  return 0;
}